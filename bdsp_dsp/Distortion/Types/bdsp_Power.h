#pragma once

namespace bdsp
{
	namespace dsp
	{
		namespace DistortionTypes
		{

			static const juce::Array<double> PowerCompensationData = { 0.560101,0.583382,0.605081,0.625289,0.639556,0.655995,0.673551,0.68658,0.699549,0.711701,0.716605,0.729754,0.741334,0.748832,0.758474,0.765288,0.772932,0.778957,0.788759,0.792877,0.800108,0.804694,0.808831,0.812334,0.821346,0.824033,0.829147,0.832428,0.836259,0.842477,0.846804,0.846879,0.851333,0.85384,0.857413,0.859933,0.861069,0.863357,0.86965,0.870425,0.871544,0.874595,0.878332,0.881111,0.88151,0.884966,0.885763,0.887555,0.889281,0.889536,0.893747,0.895147,0.895366,0.897459,0.900181,0.900388,0.901287,0.902739,0.903245,0.905239,0.904927,0.906056,0.908784,0.909275,0.911335,0.910739,0.912803,0.913738,0.914983,0.915053,0.916419,0.916758,0.918998,0.919621,0.919493,0.921057,0.921961,0.92183,0.92292,0.923797,0.923813,0.924765,0.92508,0.92657,0.925844,0.927674,0.928208,0.929361,0.928355,0.930073,0.930282,0.931894,0.930119,0.93177,0.932091,0.931006,0.932976,0.934038,0.933979,0.9351,0.93701 };
			static const unsigned char PowerPathData[] = { 110,109,0,0,128,191,0,0,128,63,108,164,112,125,191,0,0,128,63,108,72,225,122,191,0,0,128,63,108,236,81,120,191,0,0,128,63,108,144,194,117,191,0,0,128,63,108,52,51,115,191,0,0,128,63,108,216,163,112,191,0,0,128,63,108,124,20,110,191,0,0,128,63,108,32, 133,107,191,0,0,128,63,108,196,245,104,191,0,0,128,63,108,104,102,102,191,255,255,127,63,108,12,215,99,191,254,255,127,63,108,176,71,97,191,253,255,127,63,108,84,184,94,191,250,255,127,63,108,248,40,92,191,246,255,127,63,108,156,153,89,191,240,255,127, 63,108,64,10,87,191,230,255,127,63,108,228,122,84,191,216,255,127,63,108,136,235,81,191,195,255,127,63,108,44,92,79,191,165,255,127,63,108,208,204,76,191,123,255,127,63,108,116,61,74,191,67,255,127,63,108,24,174,71,191,246,254,127,63,108,188,30,69,191, 144,254,127,63,108,96,143,66,191,11,254,127,63,108,4,0,64,191,92,253,127,63,108,168,112,61,191,124,252,127,63,108,76,225,58,191,95,251,127,63,108,240,81,56,191,247,249,127,63,108,148,194,53,191,52,248,127,63,108,56,51,51,191,3,246,127,63,108,220,163, 48,191,80,243,127,63,108,128,20,46,191,0,240,127,63,108,36,133,43,191,249,235,127,63,108,200,245,40,191,25,231,127,63,108,108,102,38,191,58,225,127,63,108,16,215,35,191,51,218,127,63,108,180,71,33,191,213,209,127,63,108,88,184,30,191,233,199,127,63,108, 252,40,28,191,50,188,127,63,108,160,153,25,191,111,174,127,63,108,68,10,23,191,82,158,127,63,108,232,122,20,191,137,139,127,63,108,140,235,17,191,181,117,127,63,108,48,92,15,191,112,92,127,63,108,212,204,12,191,72,63,127,63,108,120,61,10,191,189,29,127, 63,108,28,174,7,191,71,247,126,63,108,192,30,5,191,77,203,126,63,108,100,143,2,191,39,153,126,63,108,8,0,0,191,33,96,126,63,108,88,225,250,190,115,31,126,63,108,160,194,245,190,68,214,125,63,108,232,163,240,190,168,131,125,63,108,48,133,235,190,160,38, 125,63,108,120,102,230,190,20,190,124,63,108,192,71,225,190,217,72,124,63,108,8,41,220,190,169,197,123,63,108,80,10,215,190,37,51,123,63,108,152,235,209,190,209,143,122,63,108,224,204,204,190,22,218,121,63,108,40,174,199,190,61,16,121,63,108,112,143, 194,190,111,48,120,63,108,184,112,189,190,177,56,119,63,108,0,82,184,190,230,38,118,63,108,72,51,179,190,200,248,116,63,108,144,20,174,190,236,171,115,63,108,216,245,168,190,186,61,114,63,108,32,215,163,190,110,171,112,63,108,104,184,158,190,22,242,110, 63,108,176,153,153,190,140,14,109,63,108,248,122,148,190,123,253,106,63,108,64,92,143,190,82,187,104,63,108,136,61,138,190,77,68,102,63,108,208,30,133,190,104,148,99,63,108,24,0,128,190,99,167,96,63,108,191,194,117,190,188,120,93,63,108,78,133,107,190, 174,3,90,63,108,221,71,97,190,43,67,86,63,108,108,10,87,190,222,49,82,63,108,251,204,76,190,32,202,77,63,108,138,143,66,190,252,5,73,63,108,25,82,56,190,44,223,67,63,108,168,20,46,190,11,79,62,63,108,55,215,35,190,158,78,56,63,108,198,153,25,190,136, 214,49,63,108,85,92,15,190,10,223,42,63,108,228,30,5,190,2,96,35,63,108,231,194,245,189,220,80,27,63,108,6,72,225,189,154,168,18,63,108,37,205,204,189,202,93,9,63,108,68,82,184,189,246,204,254,62,108,99,215,163,189,158,112,233,62,108,130,92,143,189,182, 144,210,62,108,65,195,117,189,100,22,186,62,108,126,205,76,189,184,233,159,62,108,187,215,35,189,162,241,131,62,108,241,195,245,188,220,39,76,62,108,108,216,163,188,72,106,12,62,108,206,217,35,188,208,226,144,61,108,164,240,48,181,0,0,160,54,108,70,212, 35,60,24,222,144,189,108,168,213,163,60,20,104,12,190,108,45,193,245,60,180,37,76,190,108,89,214,35,61,170,240,131,190,108,28,204,76,61,206,232,159,190,108,223,193,117,61,138,21,186,190,108,209,91,143,61,236,143,210,190,108,178,214,163,61,224,111,233, 190,108,147,81,184,61,68,204,254,190,108,116,204,204,61,115,93,9,191,108,85,71,225,61,77,168,18,191,108,54,194,245,61,148,80,27,191,108,140,30,5,62,190,95,35,191,108,253,91,15,62,204,222,42,191,108,110,153,25,62,79,214,49,191,108,223,214,35,62,104,78, 56,191,108,80,20,46,62,218,78,62,191,108,193,81,56,62,254,222,67,191,108,50,143,66,62,210,5,73,191,108,163,204,76,62,249,201,77,191,108,20,10,87,62,185,49,82,191,108,133,71,97,62,9,67,86,191,108,246,132,107,62,144,3,90,191,108,103,194,117,62,160,120, 93,191,108,216,255,127,62,73,167,96,191,108,164,30,133,62,80,148,99,191,108,92,61,138,62,55,68,102,191,108,20,92,143,62,62,187,104,191,108,204,122,148,62,104,253,106,191,108,132,153,153,62,124,14,109,191,108,60,184,158,62,6,242,110,191,108,244,214,163, 62,96,171,112,191,108,172,245,168,62,173,61,114,191,108,100,20,174,62,225,171,115,191,108,28,51,179,62,190,248,116,191,108,212,81,184,62,220,38,118,191,108,140,112,189,62,168,56,119,191,108,68,143,194,62,103,48,120,191,108,252,173,199,62,54,16,121,191, 108,180,204,204,62,16,218,121,191,108,108,235,209,62,203,143,122,191,108,36,10,215,62,32,51,123,191,108,220,40,220,62,165,197,123,191,108,148,71,225,62,213,72,124,191,108,76,102,230,62,17,190,124,191,108,4,133,235,62,156,38,125,191,108,188,163,240,62, 165,131,125,191,108,116,194,245,62,65,214,125,191,108,44,225,250,62,113,31,126,191,108,228,255,255,62,31,96,126,191,108,78,143,2,63,38,153,126,191,108,170,30,5,63,75,203,126,191,108,6,174,7,63,70,247,126,191,108,98,61,10,63,188,29,127,191,108,190,204, 12,63,70,63,127,191,108,26,92,15,63,111,92,127,191,108,118,235,17,63,180,117,127,191,108,210,122,20,63,136,139,127,191,108,46,10,23,63,82,158,127,191,108,138,153,25,63,110,174,127,191,108,230,40,28,63,50,188,127,191,108,66,184,30,63,232,199,127,191,108, 158,71,33,63,212,209,127,191,108,250,214,35,63,51,218,127,191,108,86,102,38,63,58,225,127,191,108,178,245,40,63,24,231,127,191,108,14,133,43,63,249,235,127,191,108,106,20,46,63,0,240,127,191,108,198,163,48,63,80,243,127,191,108,34,51,51,63,3,246,127, 191,108,126,194,53,63,52,248,127,191,108,218,81,56,63,247,249,127,191,108,54,225,58,63,95,251,127,191,108,146,112,61,63,124,252,127,191,108,238,255,63,63,92,253,127,191,108,74,143,66,63,10,254,127,191,108,166,30,69,63,144,254,127,191,108,2,174,71,63, 246,254,127,191,108,94,61,74,63,67,255,127,191,108,186,204,76,63,123,255,127,191,108,22,92,79,63,165,255,127,191,108,114,235,81,63,195,255,127,191,108,206,122,84,63,216,255,127,191,108,42,10,87,63,230,255,127,191,108,134,153,89,63,240,255,127,191,108, 226,40,92,63,246,255,127,191,108,62,184,94,63,250,255,127,191,108,154,71,97,63,253,255,127,191,108,246,214,99,63,254,255,127,191,108,82,102,102,63,255,255,127,191,108,174,245,104,63,0,0,128,191,108,10,133,107,63,0,0,128,191,108,102,20,110,63,0,0,128, 191,108,194,163,112,63,0,0,128,191,108,30,51,115,63,0,0,128,191,108,122,194,117,63,0,0,128,191,108,214,81,120,63,0,0,128,191,108,50,225,122,63,0,0,128,191,108,142,112,125,63,0,0,128,191,108,234,255,127,63,0,0,128,191,101,0,0 };
			/**
			 * Agressive distortion.
			 * https://www.desmos.com/calculator/nipaesxoig
			 */
			template<typename T>
			struct Power : public DistortionTypeBase<T>
			{
				Power()
					:DistortionTypeBase<T>(PowerCompensationData, PowerPathData, sizeof(PowerPathData))
				{
				}
				T processSample(T in, T amt, bool isScaled) override
				{
					T a = 9 * amt + 1;
					T sign = signum(in);
					return (-sign * pow(abs(in - sign), a) + sign) * (isScaled ? DistortionTypeBase<T>::CompensationGain.processSample(amt) : 1);
				}

				inline static const juce::String Name{ "Power" };
			};


		}

	} //namespace dsp
} //namespace bdsp

