#pragma once

namespace bdsp
{
	namespace dsp
	{
		namespace DistortionTypes
		{

			static const double  DriveCompensationData[] = { 0.604153,0.608438,0.613643,0.61542,0.61483,0.619335,0.627418,0.630126,0.629166,0.634336,0.637122,0.641167,0.647085,0.647811,0.649916,0.652568,0.660056,0.656506,0.66228,0.662527,0.665524,0.668256,0.670537,0.672598,0.675993,0.678289,0.67901,0.679984,0.681059,0.682479,0.684575,0.687907,0.685024,0.690227,0.69224,0.690201,0.693906,0.696631,0.698453,0.700569,0.69814,0.701032,0.700808,0.705239,0.705235,0.706653,0.706947,0.7069,0.711935,0.708195,0.711879,0.714573,0.713518,0.715635,0.718331,0.720059,0.718593,0.719187,0.720665,0.721945,0.724257,0.721181,0.726418,0.725355,0.727696,0.727887,0.726207,0.729666,0.729603,0.730061,0.729663,0.7313,0.731925,0.732016,0.732676,0.733283,0.734233,0.736186,0.737317,0.740276,0.73746,0.738578,0.736708,0.738775,0.740853,0.742047,0.742814,0.74087,0.741998,0.743017,0.741935,0.743877,0.746144,0.743397,0.747983,0.745932,0.746566,0.746366,0.748815,0.747874,0.74937 };
			static const unsigned char DrivePathData[] = { 110,109,0,0,128,191,0,0,128,63,108,164,112,125,191,152,30,127,63,108,72,225,122,191,237,58,126,63,108,236,81,120,191,244,84,125,63,108,144,194,117,191,161,108,124,63,108,52,51,115,191,230,129,123,63,108,216,163,112,191,185,148,122,63,108,124,20,110,191, 11,165,121,63,108,32,133,107,191,206,178,120,63,108,196,245,104,191,245,189,119,63,108,104,102,102,191,115,198,118,63,108,12,215,99,191,54,204,117,63,108,176,71,97,191,48,207,116,63,108,84,184,94,191,82,207,115,63,108,248,40,92,191,139,204,114,63,108, 156,153,89,191,200,198,113,63,108,64,10,87,191,250,189,112,63,108,228,122,84,191,14,178,111,63,108,136,235,81,191,241,162,110,63,108,44,92,79,191,142,144,109,63,108,208,204,76,191,213,122,108,63,108,116,61,74,191,174,97,107,63,108,24,174,71,191,3,69, 106,63,108,188,30,69,191,189,36,105,63,108,96,143,66,191,199,0,104,63,108,4,0,64,191,5,217,102,63,108,168,112,61,191,99,173,101,63,108,76,225,58,191,195,125,100,63,108,240,81,56,191,10,74,99,63,108,148,194,53,191,30,18,98,63,108,56,51,51,191,223,213, 96,63,108,220,163,48,191,48,149,95,63,108,128,20,46,191,241,79,94,63,108,36,133,43,191,254,5,93,63,108,200,245,40,191,55,183,91,63,108,108,102,38,191,119,99,90,63,108,16,215,35,191,153,10,89,63,108,180,71,33,191,116,172,87,63,108,88,184,30,191,224,72, 86,63,108,252,40,28,191,177,223,84,63,108,160,153,25,191,186,112,83,63,108,68,10,23,191,205,251,81,63,108,232,122,20,191,181,128,80,63,108,140,235,17,191,65,255,78,63,108,48,92,15,191,57,119,77,63,108,212,204,12,191,102,232,75,63,108,120,61,10,191,136, 82,74,63,108,28,174,7,191,100,181,72,63,108,192,30,5,191,180,16,71,63,108,100,143,2,191,50,100,69,63,108,8,0,0,191,149,175,67,63,108,88,225,250,190,144,242,65,63,108,160,194,245,190,207,44,64,63,108,232,163,240,190,253,93,62,63,108,48,133,235,190,187, 133,60,63,108,120,102,230,190,168,163,58,63,108,192,71,225,190,95,183,56,63,108,8,41,220,190,110,192,54,63,108,80,10,215,190,101,190,52,63,108,152,235,209,190,198,176,50,63,108,224,204,204,190,14,151,48,63,108,40,174,199,190,176,112,46,63,108,112,143, 194,190,22,61,44,63,108,184,112,189,190,162,251,41,63,108,0,82,184,190,168,171,39,63,108,72,51,179,190,112,76,37,63,108,144,20,174,190,57,221,34,63,108,216,245,168,190,47,93,32,63,108,32,215,163,190,114,203,29,63,108,104,184,158,190,14,39,27,63,108,176, 153,153,190,0,111,24,63,108,248,122,148,190,46,162,21,63,108,64,92,143,190,106,191,18,63,108,136,61,138,190,109,197,15,63,108,208,30,133,190,213,178,12,63,108,24,0,128,190,36,134,9,63,108,191,194,117,190,190,61,6,63,108,78,133,107,190,227,215,2,63,108, 221,71,97,190,93,165,254,62,108,108,10,87,190,45,88,247,62,108,251,204,76,190,198,195,239,62,108,138,143,66,190,102,227,231,62,108,25,82,56,190,230,177,223,62,108,168,20,46,190,196,41,215,62,108,55,215,35,190,28,69,206,62,108,198,153,25,190,177,253,196, 62,108,85,92,15,190,248,76,187,62,108,228,30,5,190,42,44,177,62,108,231,194,245,189,111,148,166,62,108,6,72,225,189,7,127,155,62,108,37,205,204,189,163,229,143,62,108,68,82,184,189,197,194,131,62,108,99,215,163,189,181,36,110,62,108,130,92,143,189,218, 164,83,62,108,65,195,117,189,2,8,56,62,108,126,205,76,189,13,88,27,62,108,187,215,35,189,41,81,251,61,108,241,195,245,188,186,48,190,61,108,108,216,163,188,145,71,127,61,108,206,217,35,188,108,42,0,61,108,164,240,48,181,70,152,10,54,108,70,212,35,60, 27,38,0,189,108,168,213,163,60,77,67,127,189,108,45,193,245,60,164,46,190,189,108,89,214,35,61,33,79,251,189,108,28,204,76,61,16,87,27,190,108,223,193,117,61,13,7,56,190,108,209,91,143,61,241,163,83,190,108,178,214,163,61,213,35,110,190,108,147,81,184, 61,90,194,131,190,108,116,204,204,61,60,229,143,190,108,85,71,225,61,165,126,155,190,108,54,194,245,61,18,148,166,190,108,140,30,5,62,209,43,177,190,108,253,91,15,62,163,76,187,190,108,110,153,25,62,96,253,196,190,108,223,214,35,62,206,68,206,190,108, 80,20,46,62,120,41,215,190,108,193,81,56,62,157,177,223,190,108,50,143,66,62,31,227,231,190,108,163,204,76,62,132,195,239,190,108,20,10,87,62,236,87,247,190,108,133,71,97,62,32,165,254,190,108,246,132,107,62,197,215,2,191,108,103,194,117,62,161,61,6, 191,108,216,255,127,62,9,134,9,191,108,164,30,133,62,186,178,12,191,108,92,61,138,62,83,197,15,191,108,20,92,143,62,80,191,18,191,108,204,122,148,62,21,162,21,191,108,132,153,153,62,232,110,24,191,108,60,184,158,62,247,38,27,191,108,244,214,163,62,91, 203,29,191,108,172,245,168,62,25,93,32,191,108,100,20,174,62,35,221,34,191,108,28,51,179,62,92,76,37,191,108,212,81,184,62,148,171,39,191,108,140,112,189,62,142,251,41,191,108,68,143,194,62,4,61,44,191,108,252,173,199,62,158,112,46,191,108,180,204,204, 62,252,150,48,191,108,108,235,209,62,180,176,50,191,108,36,10,215,62,84,190,52,191,108,220,40,220,62,94,192,54,191,108,148,71,225,62,77,183,56,191,108,76,102,230,62,152,163,58,191,108,4,133,235,62,170,133,60,191,108,188,163,240,62,236,93,62,191,108,116, 194,245,62,194,44,64,191,108,44,225,250,62,129,242,65,191,108,228,255,255,62,136,175,67,191,108,78,143,2,63,35,100,69,191,108,170,30,5,63,164,16,71,191,108,6,174,7,63,85,181,72,191,108,98,61,10,63,124,82,74,191,108,190,204,12,63,88,232,75,191,108,26, 92,15,63,44,119,77,191,108,118,235,17,63,51,255,78,191,108,210,122,20,63,168,128,80,191,108,46,10,23,63,191,251,81,191,108,138,153,25,63,174,112,83,191,108,230,40,28,63,165,223,84,191,108,66,184,30,63,212,72,86,191,108,158,71,33,63,104,172,87,191,108, 250,214,35,63,141,10,89,191,108,86,102,38,63,107,99,90,191,108,178,245,40,63,43,183,91,191,108,14,133,43,63,243,5,93,191,108,106,20,46,63,228,79,94,191,108,198,163,48,63,37,149,95,191,108,34,51,51,63,212,213,96,191,108,126,194,53,63,19,18,98,191,108, 218,81,56,63,1,74,99,191,108,54,225,58,63,185,125,100,191,108,146,112,61,63,89,173,101,191,108,238,255,63,63,252,216,102,191,108,74,143,66,63,188,0,104,191,108,166,30,69,63,179,36,105,191,108,2,174,71,63,248,68,106,191,108,94,61,74,63,164,97,107,191, 108,186,204,76,63,204,122,108,191,108,22,92,79,63,134,144,109,191,108,114,235,81,63,232,162,110,191,108,206,122,84,63,6,178,111,191,108,42,10,87,63,241,189,112,191,108,134,153,89,63,192,198,113,191,108,226,40,92,63,129,204,114,191,108,62,184,94,63,73, 207,115,191,108,154,71,97,63,41,207,116,191,108,246,214,99,63,46,204,117,191,108,82,102,102,63,105,198,118,191,108,174,245,104,63,239,189,119,191,108,10,133,107,63,198,178,120,191,108,102,20,110,63,2,165,121,191,108,194,163,112,63,176,148,122,191,108, 30,51,115,63,223,129,123,191,108,122,194,117,63,153,108,124,191,108,214,81,120,63,236,84,125,191,108,50,225,122,63,229,58,126,191,108,142,112,125,63,144,30,127,191,108,234,255,127,63,248,255,127,191,101,0,0 };
			/**
			 * Standard distortion. Tranfer function is based on hyperbolic arcsin.
			 * https://www.desmos.com/calculator/oh7zirjuy4
			 */
			template<typename T>
			struct Drive : public DistortionTypeBase<T>
			{
				Drive()
					:DistortionTypeBase<T>(DriveCompensationData, std::size(DriveCompensationData), DrivePathData, sizeof(DrivePathData))
				{
				}
				T processSample(T in, T amt, bool isScaled) override
				{
					T a = 9 * amt + 1;
					return asinh(a * in) / asinh(a) * (isScaled ? DistortionTypeBase<T>::CompensationGain.processSample(amt) : 1);
				}

				inline static const juce::String Name{ "Drive" };
			};


		}

	} //namespace dsp
} //namespace bdsp

