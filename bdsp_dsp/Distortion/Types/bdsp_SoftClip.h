#pragma once

namespace bdsp
{
	namespace dsp
	{
		namespace DistortionTypes
		{

			static const double  SoftClipCompensationData [] = { 0.561356,0.603911,0.639355,0.668679,0.697743,0.718688,0.743837,0.762323,0.779012,0.793954,0.80726,0.81844,0.832714,0.839782,0.844729,0.854917,0.862756,0.868886,0.87431,0.879043,0.883765,0.885536,0.889394,0.895997,0.898463,0.900534,0.904699,0.907869,0.910797,0.913504,0.91458,0.917702,0.918834,0.921243,0.921925,0.924624,0.925925,0.925943,0.92836,0.930002,0.930703,0.931806,0.933511,0.934062,0.936024,0.936381,0.938909,0.938636,0.938509,0.939795,0.941486,0.940425,0.941298,0.94207,0.94368,0.944387,0.94399,0.94358,0.945811,0.946105,0.945671,0.946825,0.946948,0.948361,0.948727,0.947909,0.947554,0.949899,0.949509,0.951454,0.950797,0.950756,0.9499,0.952431,0.951929,0.951826,0.953513,0.953169,0.952697,0.953397,0.954737,0.95385,0.953229,0.954595,0.954204,0.954037,0.955221,0.954735,0.955714,0.954569,0.956488,0.956364,0.957185,0.95687,0.95724,0.956886,0.957098,0.956306,0.958063,0.958033,0.95707 };
			static const unsigned char SoftClipPathData[] = { 110,109,0,0,128,191,228,255,127,63,108,164,112,125,191,228,255,127,63,108,72,225,122,191,228,255,127,63,108,236,81,120,191,228,255,127,63,108,144,194,117,191,228,255,127,63,108,52,51,115,191,228,255,127,63,108,216,163,112,191,228,255,127,63,108,124,20, 110,191,228,255,127,63,108,32,133,107,191,228,255,127,63,108,196,245,104,191,228,255,127,63,108,104,102,102,191,228,255,127,63,108,12,215,99,191,228,255,127,63,108,176,71,97,191,228,255,127,63,108,84,184,94,191,228,255,127,63,108,248,40,92,191,228,255, 127,63,108,156,153,89,191,228,255,127,63,108,64,10,87,191,228,255,127,63,108,228,122,84,191,228,255,127,63,108,136,235,81,191,228,255,127,63,108,44,92,79,191,228,255,127,63,108,208,204,76,191,228,255,127,63,108,116,61,74,191,228,255,127,63,108,24,174, 71,191,228,255,127,63,108,188,30,69,191,228,255,127,63,108,96,143,66,191,228,255,127,63,108,4,0,64,191,228,255,127,63,108,168,112,61,191,228,255,127,63,108,76,225,58,191,228,255,127,63,108,240,81,56,191,228,255,127,63,108,148,194,53,191,228,255,127,63, 108,56,51,51,191,228,255,127,63,108,220,163,48,191,228,255,127,63,108,128,20,46,191,228,255,127,63,108,36,133,43,191,228,255,127,63,108,200,245,40,191,228,255,127,63,108,108,102,38,191,227,255,127,63,108,16,215,35,191,222,255,127,63,108,180,71,33,191, 216,255,127,63,108,88,184,30,191,209,255,127,63,108,252,40,28,191,201,255,127,63,108,160,153,25,191,191,255,127,63,108,68,10,23,191,179,255,127,63,108,232,122,20,191,164,255,127,63,108,140,235,17,191,147,255,127,63,108,48,92,15,191,125,255,127,63,108, 212,204,12,191,100,255,127,63,108,120,61,10,191,68,255,127,63,108,28,174,7,191,30,255,127,63,108,192,30,5,191,239,254,127,63,108,100,143,2,191,180,254,127,63,108,8,0,0,191,107,254,127,63,108,88,225,250,190,17,254,127,63,108,160,194,245,190,159,253,127, 63,108,232,163,240,190,16,253,127,63,108,48,133,235,190,92,252,127,63,108,120,102,230,190,119,251,127,63,108,192,71,225,190,83,250,127,63,108,8,41,220,190,219,248,127,63,108,80,10,215,190,246,246,127,63,108,152,235,209,190,128,244,127,63,108,224,204, 204,190,73,241,127,63,108,40,174,199,190,13,237,127,63,108,112,143,194,190,113,231,127,63,108,184,112,189,190,245,223,127,63,108,0,82,184,190,229,213,127,63,108,72,51,179,190,65,200,127,63,108,144,20,174,190,160,181,127,63,108,216,245,168,190,248,155, 127,63,108,32,215,163,190,86,120,127,63,108,104,184,158,190,109,70,127,63,108,176,153,153,190,241,255,126,63,108,248,122,148,190,168,155,126,63,108,64,92,143,190,4,12,126,63,108,136,61,138,190,98,61,125,63,108,208,30,133,190,165,19,124,63,108,24,0,128, 190,48,104,122,63,108,191,194,117,190,131,8,120,63,108,78,133,107,190,63,185,116,63,108,221,71,97,190,232,61,112,63,108,108,10,87,190,80,105,106,63,108,251,204,76,190,187,44,99,63,108,138,143,66,190,133,161,90,63,108,25,82,56,190,225,255,80,63,108,168, 20,46,190,119,142,70,63,108,55,215,35,190,57,143,59,63,108,198,153,25,190,218,54,48,63,108,85,92,15,190,235,169,36,63,108,228,30,5,190,227,255,24,63,108,231,194,245,189,147,70,13,63,108,6,72,225,189,199,133,1,63,108,37,205,204,189,243,130,235,62,108, 68,82,184,189,102,247,211,62,108,99,215,163,189,176,106,188,62,108,130,92,143,189,136,221,164,62,108,65,195,117,189,67,80,141,62,108,126,205,76,189,220,133,107,62,108,187,215,35,189,79,107,60,62,108,241,195,245,188,176,80,13,62,108,108,216,163,188,19, 108,188,61,108,206,217,35,188,205,109,60,61,108,164,240,48,181,0,188,68,54,108,70,212,35,60,102,103,60,189,108,168,213,163,60,223,104,188,189,108,45,193,245,60,23,79,13,190,108,89,214,35,61,181,105,60,190,108,28,204,76,61,82,132,107,190,108,223,193,117, 61,118,79,141,190,108,209,91,143,61,187,220,164,190,108,178,214,163,61,227,105,188,190,108,147,81,184,61,153,246,211,190,108,116,204,204,61,46,130,235,190,108,85,71,225,61,97,133,1,191,108,54,194,245,61,45,70,13,191,108,140,30,5,62,125,255,24,191,108, 253,91,15,62,134,169,36,191,108,110,153,25,62,122,54,48,191,108,223,214,35,62,216,142,59,191,108,80,20,46,62,25,142,70,191,108,193,81,56,62,137,255,80,191,108,50,143,66,62,57,161,90,191,108,163,204,76,62,118,44,99,191,108,20,10,87,62,24,105,106,191,108, 133,71,97,62,189,61,112,191,108,246,132,107,62,30,185,116,191,108,103,194,117,62,107,8,120,191,108,216,255,127,62,30,104,122,191,108,164,30,133,62,154,19,124,191,108,92,61,138,62,89,61,125,191,108,20,92,143,62,255,11,126,191,108,204,122,148,62,164,155, 126,191,108,132,153,153,62,239,255,126,191,108,60,184,158,62,107,70,127,191,108,244,214,163,62,84,120,127,191,108,172,245,168,62,247,155,127,191,108,100,20,174,62,160,181,127,191,108,28,51,179,62,64,200,127,191,108,212,81,184,62,228,213,127,191,108,140, 112,189,62,245,223,127,191,108,68,143,194,62,113,231,127,191,108,252,173,199,62,13,237,127,191,108,180,204,204,62,73,241,127,191,108,108,235,209,62,128,244,127,191,108,36,10,215,62,246,246,127,191,108,220,40,220,62,219,248,127,191,108,148,71,225,62,83, 250,127,191,108,76,102,230,62,119,251,127,191,108,4,133,235,62,92,252,127,191,108,188,163,240,62,16,253,127,191,108,116,194,245,62,159,253,127,191,108,44,225,250,62,17,254,127,191,108,228,255,255,62,107,254,127,191,108,78,143,2,63,180,254,127,191,108, 170,30,5,63,239,254,127,191,108,6,174,7,63,30,255,127,191,108,98,61,10,63,68,255,127,191,108,190,204,12,63,100,255,127,191,108,26,92,15,63,125,255,127,191,108,118,235,17,63,147,255,127,191,108,210,122,20,63,164,255,127,191,108,46,10,23,63,179,255,127, 191,108,138,153,25,63,191,255,127,191,108,230,40,28,63,201,255,127,191,108,66,184,30,63,209,255,127,191,108,158,71,33,63,216,255,127,191,108,250,214,35,63,222,255,127,191,108,86,102,38,63,227,255,127,191,108,178,245,40,63,228,255,127,191,108,14,133,43, 63,228,255,127,191,108,106,20,46,63,228,255,127,191,108,198,163,48,63,228,255,127,191,108,34,51,51,63,228,255,127,191,108,126,194,53,63,228,255,127,191,108,218,81,56,63,228,255,127,191,108,54,225,58,63,228,255,127,191,108,146,112,61,63,228,255,127,191, 108,238,255,63,63,228,255,127,191,108,74,143,66,63,228,255,127,191,108,166,30,69,63,228,255,127,191,108,2,174,71,63,228,255,127,191,108,94,61,74,63,228,255,127,191,108,186,204,76,63,228,255,127,191,108,22,92,79,63,228,255,127,191,108,114,235,81,63,228, 255,127,191,108,206,122,84,63,228,255,127,191,108,42,10,87,63,228,255,127,191,108,134,153,89,63,228,255,127,191,108,226,40,92,63,228,255,127,191,108,62,184,94,63,228,255,127,191,108,154,71,97,63,228,255,127,191,108,246,214,99,63,228,255,127,191,108,82, 102,102,63,228,255,127,191,108,174,245,104,63,228,255,127,191,108,10,133,107,63,228,255,127,191,108,102,20,110,63,228,255,127,191,108,194,163,112,63,228,255,127,191,108,30,51,115,63,228,255,127,191,108,122,194,117,63,228,255,127,191,108,214,81,120,63, 228,255,127,191,108,50,225,122,63,228,255,127,191,108,142,112,125,63,228,255,127,191,108,234,255,127,63,228,255,127,191,101,0,0 };
			/**
			 * Less aggressive clipping distortion. Distortion amount reduces clipping threshold.
			 * https://www.desmos.com/calculator/oiscn0jfk1
			 */
			template<typename T>
			struct SoftClip : public DistortionTypeBase<T>
			{
				SoftClip()
					:DistortionTypeBase<T>(SoftClipCompensationData, std::size(SoftClipCompensationData), SoftClipPathData,sizeof( SoftClipPathData))
				{
					std::function<T(T)> SoftClipFunc = [=](T x)
					{
						return x / pow(1 + pow(abs(x), 10), 1 / 10.0);
					};
					functionLookup.initialise(SoftClipFunc, -3, 3, 1500);
				}
				T processSample(T in, T amt, bool isScaled) override
				{
					T a = 9 * amt + 1;

					return functionLookup.processSample(a * in) * (isScaled ? DistortionTypeBase<T>::CompensationGain.processSample(amt) : 1);
				}

				inline static const juce::String Name{ "Soft Clip" };

			private:
				juce::dsp::LookupTableTransform<T> functionLookup;
			};

		}

	} //namespace dsp
} //namespace bdsp
