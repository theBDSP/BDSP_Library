#pragma once

namespace bdsp
{
	namespace dsp
	{
		namespace DistortionTypes
		{

			static const juce::Array<double> FuzzCompensationData = { 0.570432,0.623093,0.67264,0.708189,0.744023,0.769342,0.790909,0.811262,0.826267,0.839814,0.850052,0.860489,0.868846,0.878127,0.883431,0.889136,0.893665,0.899664,0.902399,0.90751,0.910321,0.912985,0.914971,0.918747,0.920885,0.923502,0.924904,0.926588,0.930759,0.930895,0.932172,0.934392,0.933373,0.935451,0.936605,0.936234,0.938169,0.938262,0.940145,0.941883,0.941609,0.944309,0.943886,0.944436,0.946215,0.945911,0.946352,0.946996,0.947366,0.948109,0.948536,0.948118,0.948827,0.949878,0.951011,0.951201,0.950706,0.952271,0.951977,0.952897,0.951987,0.951905,0.953853,0.955322,0.953847,0.955825,0.95544,0.954332,0.955389,0.954754,0.956135,0.957346,0.955808,0.955994,0.956664,0.956514,0.957381,0.957971,0.957618,0.95654,0.959009,0.95977,0.959287,0.959166,0.957682,0.958505,0.958817,0.958748,0.95916,0.960435,0.95867,0.959178,0.959526,0.959517,0.959098,0.959789,0.958758,0.961154,0.961628,0.961735,0.96194 };
			static const unsigned char FuzzPathData[] = { 110,109,0,0,128,191,0,0,128,63,108,164,112,125,191,0,0,128,63,108,72,225,122,191,0,0,128,63,108,236,81,120,191,0,0,128,63,108,144,194,117,191,0,0,128,63,108,52,51,115,191,0,0,128,63,108,216,163,112,191,0,0,128,63,108,124,20,110,191,0,0,128,63,108,32, 133,107,191,0,0,128,63,108,196,245,104,191,0,0,128,63,108,104,102,102,191,255,255,127,63,108,12,215,99,191,254,255,127,63,108,176,71,97,191,253,255,127,63,108,84,184,94,191,250,255,127,63,108,248,40,92,191,246,255,127,63,108,156,153,89,191,240,255,127, 63,108,64,10,87,191,230,255,127,63,108,228,122,84,191,216,255,127,63,108,136,235,81,191,195,255,127,63,108,44,92,79,191,165,255,127,63,108,208,204,76,191,123,255,127,63,108,116,61,74,191,67,255,127,63,108,24,174,71,191,246,254,127,63,108,188,30,69,191, 144,254,127,63,108,96,143,66,191,11,254,127,63,108,4,0,64,191,92,253,127,63,108,168,112,61,191,124,252,127,63,108,76,225,58,191,95,251,127,63,108,240,81,56,191,247,249,127,63,108,148,194,53,191,52,248,127,63,108,56,51,51,191,3,246,127,63,108,220,163, 48,191,80,243,127,63,108,128,20,46,191,0,240,127,63,108,36,133,43,191,249,235,127,63,108,200,245,40,191,25,231,127,63,108,108,102,38,191,58,225,127,63,108,16,215,35,191,51,218,127,63,108,180,71,33,191,213,209,127,63,108,88,184,30,191,233,199,127,63,108, 252,40,28,191,50,188,127,63,108,160,153,25,191,111,174,127,63,108,68,10,23,191,82,158,127,63,108,232,122,20,191,137,139,127,63,108,140,235,17,191,181,117,127,63,108,48,92,15,191,112,92,127,63,108,212,204,12,191,72,63,127,63,108,120,61,10,191,189,29,127, 63,108,28,174,7,191,71,247,126,63,108,192,30,5,191,77,203,126,63,108,100,143,2,191,39,153,126,63,108,8,0,0,191,33,96,126,63,108,88,225,250,190,115,31,126,63,108,160,194,245,190,68,214,125,63,108,232,163,240,190,168,131,125,63,108,48,133,235,190,160,38, 125,63,108,120,102,230,190,20,190,124,63,108,192,71,225,190,217,72,124,63,108,8,41,220,190,169,197,123,63,108,80,10,215,190,37,51,123,63,108,152,235,209,190,209,143,122,63,108,224,204,204,190,22,218,121,63,108,40,174,199,190,61,16,121,63,108,112,143, 194,190,111,48,120,63,108,184,112,189,190,177,56,119,63,108,0,82,184,190,230,38,118,63,108,72,51,179,190,200,248,116,63,108,144,20,174,190,236,171,115,63,108,216,245,168,190,186,61,114,63,108,32,215,163,190,110,171,112,63,108,104,184,158,190,22,242,110, 63,108,176,153,153,190,140,14,109,63,108,248,122,148,190,123,253,106,63,108,64,92,143,190,82,187,104,63,108,136,61,138,190,77,68,102,63,108,208,30,133,190,104,148,99,63,108,24,0,128,190,99,167,96,63,108,191,194,117,190,188,120,93,63,108,78,133,107,190, 174,3,90,63,108,221,71,97,190,43,67,86,63,108,108,10,87,190,222,49,82,63,108,251,204,76,190,32,202,77,63,108,138,143,66,190,252,5,73,63,108,25,82,56,190,44,223,67,63,108,168,20,46,190,11,79,62,63,108,55,215,35,190,158,78,56,63,108,198,153,25,190,136, 214,49,63,108,85,92,15,190,10,223,42,63,108,228,30,5,190,2,96,35,63,108,231,194,245,189,220,80,27,63,108,6,72,225,189,154,168,18,63,108,37,205,204,189,202,93,9,63,108,68,82,184,189,246,204,254,62,108,99,215,163,189,158,112,233,62,108,130,92,143,189,182, 144,210,62,108,65,195,117,189,100,22,186,62,108,126,205,76,189,184,233,159,62,108,187,215,35,189,162,241,131,62,108,241,195,245,188,220,39,76,62,108,108,216,163,188,72,106,12,62,108,206,217,35,188,208,226,144,61,108,164,240,48,181,0,0,160,54,108,70,212, 35,60,176,73,154,189,108,168,213,163,60,240,65,31,190,108,45,193,245,60,72,154,118,190,108,89,214,35,61,124,186,169,190,108,28,204,76,61,4,14,219,190,108,223,193,117,61,48,183,7,191,108,209,91,143,61,226,129,35,191,108,178,214,163,61,12,252,64,191,108, 147,81,184,61,124,59,96,191,108,116,204,204,61,0,0,128,191,108,85,71,225,61,0,0,128,191,108,54,194,245,61,0,0,128,191,108,140,30,5,62,0,0,128,191,108,253,91,15,62,0,0,128,191,108,110,153,25,62,0,0,128,191,108,223,214,35,62,0,0,128,191,108,80,20,46,62, 0,0,128,191,108,193,81,56,62,0,0,128,191,108,50,143,66,62,0,0,128,191,108,163,204,76,62,0,0,128,191,108,20,10,87,62,0,0,128,191,108,133,71,97,62,0,0,128,191,108,246,132,107,62,0,0,128,191,108,103,194,117,62,0,0,128,191,108,216,255,127,62,0,0,128,191, 108,164,30,133,62,0,0,128,191,108,92,61,138,62,0,0,128,191,108,20,92,143,62,0,0,128,191,108,204,122,148,62,0,0,128,191,108,132,153,153,62,0,0,128,191,108,60,184,158,62,0,0,128,191,108,244,214,163,62,0,0,128,191,108,172,245,168,62,0,0,128,191,108,100, 20,174,62,0,0,128,191,108,28,51,179,62,0,0,128,191,108,212,81,184,62,0,0,128,191,108,140,112,189,62,0,0,128,191,108,68,143,194,62,0,0,128,191,108,252,173,199,62,0,0,128,191,108,180,204,204,62,0,0,128,191,108,108,235,209,62,0,0,128,191,108,36,10,215,62, 0,0,128,191,108,220,40,220,62,0,0,128,191,108,148,71,225,62,0,0,128,191,108,76,102,230,62,0,0,128,191,108,4,133,235,62,0,0,128,191,108,188,163,240,62,0,0,128,191,108,116,194,245,62,0,0,128,191,108,44,225,250,62,0,0,128,191,108,228,255,255,62,0,0,128, 191,108,78,143,2,63,0,0,128,191,108,170,30,5,63,0,0,128,191,108,6,174,7,63,0,0,128,191,108,98,61,10,63,0,0,128,191,108,190,204,12,63,0,0,128,191,108,26,92,15,63,0,0,128,191,108,118,235,17,63,0,0,128,191,108,210,122,20,63,0,0,128,191,108,46,10,23,63,0, 0,128,191,108,138,153,25,63,0,0,128,191,108,230,40,28,63,0,0,128,191,108,66,184,30,63,0,0,128,191,108,158,71,33,63,0,0,128,191,108,250,214,35,63,0,0,128,191,108,86,102,38,63,0,0,128,191,108,178,245,40,63,0,0,128,191,108,14,133,43,63,0,0,128,191,108,106, 20,46,63,0,0,128,191,108,198,163,48,63,0,0,128,191,108,34,51,51,63,0,0,128,191,108,126,194,53,63,0,0,128,191,108,218,81,56,63,0,0,128,191,108,54,225,58,63,0,0,128,191,108,146,112,61,63,0,0,128,191,108,238,255,63,63,0,0,128,191,108,74,143,66,63,0,0,128, 191,108,166,30,69,63,0,0,128,191,108,2,174,71,63,0,0,128,191,108,94,61,74,63,0,0,128,191,108,186,204,76,63,0,0,128,191,108,22,92,79,63,0,0,128,191,108,114,235,81,63,0,0,128,191,108,206,122,84,63,0,0,128,191,108,42,10,87,63,0,0,128,191,108,134,153,89, 63,0,0,128,191,108,226,40,92,63,0,0,128,191,108,62,184,94,63,0,0,128,191,108,154,71,97,63,0,0,128,191,108,246,214,99,63,0,0,128,191,108,82,102,102,63,0,0,128,191,108,174,245,104,63,0,0,128,191,108,10,133,107,63,0,0,128,191,108,102,20,110,63,0,0,128,191, 108,194,163,112,63,0,0,128,191,108,30,51,115,63,0,0,128,191,108,122,194,117,63,0,0,128,191,108,214,81,120,63,0,0,128,191,108,50,225,122,63,0,0,128,191,108,142,112,125,63,0,0,128,191,108,234,255,127,63,0,0,128,191,101,0,0 };			
			/**
			 * Assymetric-Clipping Distortion.
			 * https://www.desmos.com/calculator/jjc1zl58mg
			 */
			template<typename T>
			struct Fuzz : public DistortionTypeBase<T>
			{
				Fuzz()
					:DistortionTypeBase<T>(FuzzCompensationData, FuzzPathData, sizeof(FuzzPathData))
				{
				}
				T processSample(T in, T amt, bool isScaled) override
				{
					if (in < -1) // function can get undefined here, plus we want to clip here anyways
					{
						return -1;
					}


					T a = 9 * amt + 1;
					return juce::jmin(abs(pow(in + 1, a)) - 1, T(1)) * (isScaled ? DistortionTypeBase<T>::CompensationGain.processSample(amt) : 1);
				}

				inline static const juce::String Name{ "Fuzz" };

			};


		}

	} //namespace dsp
} //namespace bdsp

