#pragma once

namespace bdsp
{
	namespace dsp
	{
		namespace DistortionTypes
		{
			static const juce::Array<double> SinFoldCompensationData = { 0.704559,0.732472,0.756222,0.773388,0.781096,0.786593,0.784955,0.780673,0.775324,0.7622,0.749635,0.738485,0.721404,0.708633,0.695332,0.686966,0.671842,0.667197,0.65669,0.654965,0.650639,0.64689,0.643456,0.63985,0.635763,0.633976,0.634736,0.625006,0.622246,0.610782,0.612709,0.602184,0.599901,0.594346,0.587075,0.578084,0.575119,0.565802,0.564317,0.555752,0.553499,0.546149,0.541812,0.538166,0.535869,0.529281,0.526765,0.521863,0.517175,0.514366,0.509814,0.50557,0.502639,0.502988,0.497265,0.494104,0.483191,0.486389,0.483924,0.478242,0.471386,0.477096,0.470696,0.469003,0.463893,0.459234,0.459037,0.458658,0.455624,0.451884,0.448202,0.446373,0.443881,0.441733,0.438903,0.435333,0.435749,0.432196,0.426505,0.424666,0.420865,0.425251,0.41882,0.418749,0.413649,0.41781,0.409709,0.407977,0.409408,0.408054,0.406082,0.406103,0.399018,0.40122,0.401476,0.395774,0.394811,0.396812,0.390583,0.388809,0.39132 };
			static const unsigned char SinFoldPathData[] = { 110,109,0,0,128,191,199,27,79,63,108,164,112,125,191,116,180,67,63,108,72,225,122,191,171,71,55,63,108,236,81,120,191,5,230,41,63,108,144,194,117,191,99,161,27,63,108,52,51,115,191,214,140,12,63,108,216,163,112,191,3,121,249,62,108,124,20,110,191,16, 139,216,62,108,32,133,107,191,207,123,182,62,108,196,245,104,191,194,120,147,62,108,104,102,102,191,96,97,95,62,108,12,215,99,191,204,166,22,62,108,176,71,97,191,229,69,154,61,108,84,184,94,191,217,2,78,59,108,248,40,92,191,81,110,141,189,108,156,153, 89,191,227,71,16,190,108,64,10,87,191,219,23,89,190,108,228,122,84,191,229,98,144,190,108,136,235,81,191,246,120,179,190,108,44,92,79,191,65,159,213,190,108,208,204,76,191,38,168,246,190,108,116,61,74,191,193,51,11,191,108,24,174,71,191,118,89,26,191, 108,188,30,69,191,245,176,40,191,108,96,143,66,191,21,39,54,191,108,4,0,64,191,218,169,66,191,108,168,112,61,191,141,40,78,191,108,76,225,58,191,211,147,88,191,108,240,81,56,191,192,221,97,191,108,148,194,53,191,235,249,105,191,108,56,51,51,191,127,221, 112,191,108,220,163,48,191,71,127,118,191,108,128,20,46,191,189,215,122,191,108,36,133,43,191,21,225,125,191,108,200,245,40,191,60,151,127,191,108,108,102,38,191,235,247,127,191,108,16,215,35,191,161,2,127,191,108,180,71,33,191,166,184,124,191,108,88, 184,30,191,8,29,121,191,108,252,40,28,191,153,52,116,191,108,160,153,25,191,233,5,110,191,108,68,10,23,191,57,153,102,191,108,232,122,20,191,116,248,93,191,108,140,235,17,191,35,47,84,191,108,48,92,15,191,87,74,73,191,108,212,204,12,191,161,88,61,191, 108,120,61,10,191,242,105,48,191,108,28,174,7,191,146,143,34,191,108,192,30,5,191,4,220,19,191,108,100,143,2,191,233,98,4,191,108,8,0,0,191,229,113,232,190,108,88,225,250,190,108,231,198,190,108,160,194,245,190,55,83,164,190,108,232,163,240,190,121,227, 128,190,108,48,133,235,190,17,143,57,190,108,120,102,230,190,144,190,224,189,108,192,71,225,190,122,101,26,189,108,8,41,220,190,115,128,13,61,108,80,10,215,190,170,84,218,61,108,152,235,209,190,181,98,54,62,108,224,204,204,190,106,167,126,62,108,40,174, 199,190,244,203,162,62,108,112,143,194,190,180,106,197,62,108,184,112,189,190,180,1,231,62,108,0,82,184,190,10,178,3,63,108,72,51,179,190,73,51,19,63,108,144,20,174,190,222,239,33,63,108,216,245,168,190,27,212,47,63,108,32,215,163,190,112,205,60,63,108, 104,184,158,190,135,202,72,63,108,176,153,153,190,93,187,83,63,108,248,122,148,190,83,145,93,63,108,64,92,143,190,69,63,102,63,108,136,61,138,190,156,185,109,63,108,208,30,133,190,89,246,115,63,108,24,0,128,190,39,237,120,63,108,191,194,117,190,101,151, 124,63,108,78,133,107,190,44,240,126,63,108,221,71,97,190,90,244,127,63,108,108,10,87,190,147,162,127,63,108,251,204,76,190,70,251,125,63,108,138,143,66,190,166,0,123,63,108,25,82,56,190,175,182,118,63,108,168,20,46,190,28,35,113,63,108,55,215,35,190, 97,77,106,63,108,198,153,25,190,158,62,98,63,108,85,92,15,190,152,1,89,63,108,228,30,5,190,166,162,78,63,108,231,194,245,189,164,47,67,63,108,6,72,225,189,220,183,54,63,108,37,205,204,189,249,75,41,63,108,68,82,184,189,231,253,26,63,108,99,215,163,189, 196,224,11,63,108,130,92,143,189,128,17,248,62,108,65,195,117,189,14,22,215,62,108,126,205,76,189,63,251,180,62,108,187,215,35,189,166,238,145,62,108,241,195,245,188,44,62,92,62,108,108,216,163,188,206,120,19,62,108,206,217,35,188,211,220,147,61,108, 164,240,48,181,74,208,159,54,108,70,212,35,60,216,215,147,189,108,168,213,163,60,84,118,19,190,108,45,193,245,60,187,59,92,190,108,89,214,35,61,115,237,145,190,108,28,204,76,61,20,250,180,190,108,223,193,117,61,235,20,215,190,108,209,91,143,61,106,16, 248,190,108,178,214,163,61,63,224,11,191,108,147,81,184,61,105,253,26,191,108,116,204,204,61,129,75,41,191,108,85,71,225,61,109,183,54,191,108,54,194,245,61,60,47,67,191,108,140,30,5,62,72,162,78,191,108,253,91,15,62,67,1,89,191,108,110,153,25,62,83, 62,98,191,108,223,214,35,62,32,77,106,191,108,80,20,46,62,231,34,113,191,108,193,81,56,62,133,182,118,191,108,50,143,66,62,135,0,123,191,108,163,204,76,62,50,251,125,191,108,20,10,87,62,139,162,127,191,108,133,71,97,62,93,244,127,191,108,246,132,107, 62,58,240,126,191,108,103,194,117,62,126,151,124,191,108,216,255,127,62,76,237,120,191,108,164,30,133,62,137,246,115,191,108,92,61,138,62,215,185,109,191,108,20,92,143,62,139,63,102,191,108,204,122,148,62,163,145,93,191,108,132,153,153,62,183,187,83, 191,108,60,184,158,62,234,202,72,191,108,244,214,163,62,220,205,60,191,108,172,245,168,62,143,212,47,191,108,100,20,174,62,90,240,33,191,108,28,51,179,62,204,51,19,191,108,212,81,184,62,148,178,3,191,108,140,112,189,62,210,2,231,190,108,68,143,194,62, 219,107,197,190,108,252,173,199,62,35,205,162,190,108,180,204,204,62,214,169,126,190,108,108,235,209,62,43,101,54,190,108,36,10,215,62,163,89,218,189,108,220,40,220,62,113,138,13,189,108,148,71,225,62,188,91,26,61,108,76,102,230,62,184,185,224,61,108, 4,133,235,62,171,140,57,62,108,188,163,240,62,75,226,128,62,108,116,194,245,62,16,82,164,62,108,44,225,250,62,77,230,198,62,108,228,255,255,62,207,112,232,62,108,78,143,2,63,99,98,4,63,108,170,30,5,63,130,219,19,63,108,6,174,7,63,23,143,34,63,108,98, 61,10,63,126,105,48,63,108,190,204,12,63,53,88,61,63,108,26,92,15,63,244,73,73,63,108,118,235,17,63,201,46,84,63,108,210,122,20,63,37,248,93,63,108,46,10,23,63,243,152,102,63,108,138,153,25,63,177,5,110,63,108,230,40,28,63,108,52,116,63,108,66,184,30, 63,229,28,121,63,108,158,71,33,63,141,184,124,63,108,250,214,35,63,148,2,127,63,108,86,102,38,63,233,247,127,63,108,178,245,40,63,68,151,127,63,108,14,133,43,63,40,225,125,63,108,106,20,46,63,221,215,122,63,108,198,163,48,63,114,127,118,63,108,34,51, 51,63,181,221,112,63,108,126,194,53,63,44,250,105,63,108,218,81,56,63,11,222,97,63,108,54,225,58,63,40,148,88,63,108,146,112,61,63,236,40,78,63,108,238,255,63,63,66,170,66,63,108,74,143,66,63,133,39,54,63,108,166,30,69,63,109,177,40,63,108,2,174,71,63, 246,89,26,63,108,94,61,74,63,71,52,11,63,108,186,204,76,63,62,169,246,62,108,22,92,79,63,100,160,213,62,108,114,235,81,63,34,122,179,62,108,206,122,84,63,24,100,144,62,108,42,10,87,63,77,26,89,62,108,134,153,89,63,93,74,16,62,108,226,40,92,63,78,115, 141,61,108,62,184,94,63,217,98,77,187,108,154,71,97,63,233,64,154,189,108,246,214,99,63,83,164,22,190,108,82,102,102,63,240,94,95,190,108,174,245,104,63,144,119,147,190,108,10,133,107,63,164,122,182,190,108,102,20,110,63,238,137,216,190,108,194,163,112, 63,236,119,249,190,108,30,51,115,63,80,140,12,191,108,122,194,117,63,228,160,27,191,108,214,81,120,63,141,229,41,191,108,50,225,122,63,59,71,55,191,108,142,112,125,63,13,180,67,191,108,234,255,127,63,105,27,79,191,101,0,0 };

			/**
			 * Aggressive Wavefolding Distortion.
			 * https://www.desmos.com/calculator/eyhfoy0rot
			 */
			template<typename T>
			struct SinFold : public DistortionTypeBase<T>
			{
				SinFold()
					:DistortionTypeBase<T>(SinFoldCompensationData, SinFoldPathData, sizeof(SinFoldPathData))
				{
				}
				T processSample(T in, T amt, bool isScaled) override
				{
					T a = (9 * amt + 1) / 2;

					return sin(a * PI * in) * (isScaled ? DistortionTypeBase<T>::CompensationGain.processSample(amt) : 1);
				}

				inline static const juce::String Name{ "Sin Fold" };
			};


		}

	} //namespace dsp
} //namespace bdsp

