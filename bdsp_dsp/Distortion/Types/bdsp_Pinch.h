#pragma once

namespace bdsp
{
	namespace dsp
	{
		namespace DistortionTypes
		{

			static const double  PinchCompensationData [] = { 0.614333,0.647982,0.679668,0.709406,0.733526,0.756918,0.773363,0.791279,0.807992,0.821062,0.832156,0.841047,0.851256,0.857988,0.866744,0.873072,0.878614,0.88482,0.887542,0.893728,0.898831,0.901282,0.903002,0.907001,0.909124,0.912935,0.915676,0.91696,0.91911,0.921836,0.923096,0.926552,0.927415,0.927907,0.930546,0.931302,0.931,0.934633,0.936755,0.935615,0.937125,0.938053,0.939503,0.939019,0.94106,0.939772,0.941906,0.942249,0.943838,0.943037,0.94495,0.945477,0.945606,0.946142,0.948847,0.947541,0.949839,0.949416,0.94861,0.950953,0.95,0.95029,0.949736,0.951775,0.95258,0.951087,0.951619,0.95328,0.953192,0.953139,0.954959,0.954417,0.954834,0.953811,0.955904,0.956284,0.953967,0.955891,0.956603,0.955511,0.955766,0.95695,0.957445,0.956976,0.957394,0.957761,0.958079,0.956769,0.957251,0.95694,0.958085,0.959237,0.958413,0.959037,0.958059,0.959295,0.959707,0.95953,0.958926,0.959433,0.95880 };
			static const unsigned char PinchPathData[] = { 110,109,0,0,128,191,0,0,128,63,108,164,112,125,191,0,0,128,63,108,72,225,122,191,0,0,128,63,108,236,81,120,191,0,0,128,63,108,144,194,117,191,0,0,128,63,108,52,51,115,191,0,0,128,63,108,216,163,112,191,0,0,128,63,108,124,20,110,191,0,0,128,63,108,32, 133,107,191,0,0,128,63,108,196,245,104,191,0,0,128,63,108,104,102,102,191,0,0,128,63,108,12,215,99,191,0,0,128,63,108,176,71,97,191,0,0,128,63,108,84,184,94,191,0,0,128,63,108,248,40,92,191,0,0,128,63,108,156,153,89,191,0,0,128,63,108,64,10,87,191,0, 0,128,63,108,228,122,84,191,0,0,128,63,108,136,235,81,191,0,0,128,63,108,44,92,79,191,0,0,128,63,108,208,204,76,191,0,0,128,63,108,116,61,74,191,0,0,128,63,108,24,174,71,191,0,0,128,63,108,188,30,69,191,0,0,128,63,108,96,143,66,191,0,0,128,63,108,4,0, 64,191,0,0,128,63,108,168,112,61,191,0,0,128,63,108,76,225,58,191,0,0,128,63,108,240,81,56,191,0,0,128,63,108,148,194,53,191,0,0,128,63,108,56,51,51,191,0,0,128,63,108,220,163,48,191,0,0,128,63,108,128,20,46,191,0,0,128,63,108,36,133,43,191,0,0,128,63, 108,200,245,40,191,0,0,128,63,108,108,102,38,191,0,0,128,63,108,16,215,35,191,0,0,128,63,108,180,71,33,191,0,0,128,63,108,88,184,30,191,0,0,128,63,108,252,40,28,191,0,0,128,63,108,160,153,25,191,0,0,128,63,108,68,10,23,191,0,0,128,63,108,232,122,20,191, 0,0,128,63,108,140,235,17,191,0,0,128,63,108,48,92,15,191,0,0,128,63,108,212,204,12,191,0,0,128,63,108,120,61,10,191,0,0,128,63,108,28,174,7,191,0,0,128,63,108,192,30,5,191,161,237,124,63,108,100,143,2,191,114,16,120,63,108,8,0,0,191,67,51,115,63,108, 88,225,250,190,20,86,110,63,108,160,194,245,190,230,120,105,63,108,232,163,240,190,184,155,100,63,108,48,133,235,190,136,190,95,63,108,120,102,230,190,88,225,90,63,108,192,71,225,190,42,4,86,63,108,8,41,220,190,251,38,81,63,108,80,10,215,190,204,73,76, 63,108,152,235,209,190,158,108,71,63,108,224,204,204,190,111,143,66,63,108,40,174,199,190,64,178,61,63,108,112,143,194,190,17,213,56,63,108,184,112,189,190,227,247,51,63,108,0,82,184,190,180,26,47,63,108,72,51,179,190,133,61,42,63,108,144,20,174,190, 86,96,37,63,108,216,245,168,190,39,131,32,63,108,32,215,163,190,249,165,27,63,108,104,184,158,190,202,200,22,63,108,176,153,153,190,156,235,17,63,108,248,122,148,190,107,14,13,63,108,64,92,143,190,61,49,8,63,108,136,61,138,190,13,84,3,63,108,208,30,133, 190,93,248,255,62,108,24,0,128,190,230,244,255,62,108,191,194,117,190,213,239,255,62,108,78,133,107,190,122,232,255,62,108,221,71,97,190,200,221,255,62,108,108,10,87,190,60,206,255,62,108,251,204,76,190,145,183,255,62,108,138,143,66,190,158,150,255,62, 108,25,82,56,190,197,102,255,62,108,168,20,46,190,52,33,255,62,108,55,215,35,190,236,187,254,62,108,198,153,25,190,245,40,254,62,108,85,92,15,190,252,83,253,62,108,228,30,5,190,27,31,252,62,108,231,194,245,189,178,95,250,62,108,6,72,225,189,193,218,247, 62,108,37,205,204,189,241,60,244,62,108,68,82,184,189,127,15,239,62,108,99,215,163,189,254,181,231,62,108,130,92,143,189,117,104,221,62,108,65,195,117,189,33,48,207,62,108,126,205,76,189,82,234,187,62,108,187,215,35,189,118,147,162,62,108,241,195,245, 188,91,128,130,62,108,108,216,163,188,3,128,55,62,108,206,217,35,188,241,194,189,61,108,164,240,48,181,0,128,202,54,108,70,212,35,60,209,188,189,189,108,168,213,163,60,38,125,55,190,108,45,193,245,60,34,127,130,190,108,89,214,35,61,136,146,162,190,108, 28,204,76,61,142,233,187,190,108,223,193,117,61,144,47,207,190,108,209,91,143,61,13,104,221,190,108,178,214,163,61,182,181,231,190,108,147,81,184,61,75,15,239,190,108,116,204,204,61,203,60,244,190,108,85,71,225,61,167,218,247,190,108,54,194,245,61,160, 95,250,190,108,140,30,5,62,15,31,252,190,108,253,91,15,62,244,83,253,190,108,110,153,25,62,239,40,254,190,108,223,214,35,62,232,187,254,190,108,80,20,46,62,50,33,255,190,108,193,81,56,62,195,102,255,190,108,50,143,66,62,157,150,255,190,108,163,204,76, 62,144,183,255,190,108,20,10,87,62,60,206,255,190,108,133,71,97,62,200,221,255,190,108,246,132,107,62,121,232,255,190,108,103,194,117,62,213,239,255,190,108,216,255,127,62,230,244,255,190,108,164,30,133,62,93,248,255,190,108,92,61,138,62,229,83,3,191, 108,20,92,143,62,19,49,8,191,108,204,122,148,62,64,14,13,191,108,132,153,153,62,115,235,17,191,108,60,184,158,62,159,200,22,191,108,244,214,163,62,206,165,27,191,108,172,245,168,62,255,130,32,191,108,100,20,174,62,46,96,37,191,108,28,51,179,62,91,61, 42,191,108,212,81,184,62,137,26,47,191,108,140,112,189,62,186,247,51,191,108,68,143,194,62,232,212,56,191,108,252,173,199,62,22,178,61,191,108,180,204,204,62,68,143,66,191,108,108,235,209,62,117,108,71,191,108,36,10,215,62,163,73,76,191,108,220,40,220, 62,211,38,81,191,108,148,71,225,62,1,4,86,191,108,76,102,230,62,48,225,90,191,108,4,133,235,62,93,190,95,191,108,188,163,240,62,141,155,100,191,108,116,194,245,62,189,120,105,191,108,44,225,250,62,235,85,110,191,108,228,255,255,62,24,51,115,191,108,78, 143,2,63,72,16,120,191,108,170,30,5,63,120,237,124,191,108,6,174,7,63,0,0,128,191,108,98,61,10,63,0,0,128,191,108,190,204,12,63,0,0,128,191,108,26,92,15,63,0,0,128,191,108,118,235,17,63,0,0,128,191,108,210,122,20,63,0,0,128,191,108,46,10,23,63,0,0,128, 191,108,138,153,25,63,0,0,128,191,108,230,40,28,63,0,0,128,191,108,66,184,30,63,0,0,128,191,108,158,71,33,63,0,0,128,191,108,250,214,35,63,0,0,128,191,108,86,102,38,63,0,0,128,191,108,178,245,40,63,0,0,128,191,108,14,133,43,63,0,0,128,191,108,106,20, 46,63,0,0,128,191,108,198,163,48,63,0,0,128,191,108,34,51,51,63,0,0,128,191,108,126,194,53,63,0,0,128,191,108,218,81,56,63,0,0,128,191,108,54,225,58,63,0,0,128,191,108,146,112,61,63,0,0,128,191,108,238,255,63,63,0,0,128,191,108,74,143,66,63,0,0,128,191, 108,166,30,69,63,0,0,128,191,108,2,174,71,63,0,0,128,191,108,94,61,74,63,0,0,128,191,108,186,204,76,63,0,0,128,191,108,22,92,79,63,0,0,128,191,108,114,235,81,63,0,0,128,191,108,206,122,84,63,0,0,128,191,108,42,10,87,63,0,0,128,191,108,134,153,89,63,0, 0,128,191,108,226,40,92,63,0,0,128,191,108,62,184,94,63,0,0,128,191,108,154,71,97,63,0,0,128,191,108,246,214,99,63,0,0,128,191,108,82,102,102,63,0,0,128,191,108,174,245,104,63,0,0,128,191,108,10,133,107,63,0,0,128,191,108,102,20,110,63,0,0,128,191,108, 194,163,112,63,0,0,128,191,108,30,51,115,63,0,0,128,191,108,122,194,117,63,0,0,128,191,108,214,81,120,63,0,0,128,191,108,50,225,122,63,0,0,128,191,108,142,112,125,63,0,0,128,191,108,234,255,127,63,0,0,128,191,101,0,0 };
			/**
			 * Ultra-Aggressive Distortion. Hard Clip and Tape Distortion mangled together.
			 * https://www.desmos.com/calculator/m56z310cs9
			 */
			template<typename T>
			struct Pinch : public DistortionTypeBase<T>
			{
				Pinch()
					:DistortionTypeBase<T>(PinchCompensationData, std::size(PinchCompensationData), PinchPathData,sizeof( PinchPathData))
				{
					std::function<T(T)> PinchFunc = [=](T x)
					{
						return signum(x) * juce::jmax(juce::jmin(abs(x), (T)1), abs(tanh(PI * PI * x) / 2));
					};
					functionLookup.initialise(PinchFunc, -1, 1, 500);
				}
				T processSample(T in, T amt, bool isScaled) override
				{
					T a = 9 * amt + 1;

					return functionLookup.processSample(a * in) * (isScaled ? DistortionTypeBase<T>::CompensationGain.processSample(amt) : 1);
				}

				inline static const juce::String Name{ "Pinch" };

			private:
				juce::dsp::LookupTableTransform<T> functionLookup;
			};

		}

	} //namespace dsp
} //namespace bdsp
