#pragma once

namespace bdsp
{
	namespace dsp
	{
		namespace DistortionTypes
		{

			static const juce::Array<double> TapeCompensationData = { 0.48773,0.516856,0.547462,0.571467,0.596972,0.621165,0.642619,0.661465,0.678399,0.693386,0.708472,0.726778,0.738238,0.750911,0.761091,0.771769,0.783004,0.789892,0.798251,0.809353,0.814587,0.821484,0.827579,0.833899,0.839622,0.844017,0.849342,0.856168,0.859533,0.862405,0.865624,0.870943,0.873612,0.876514,0.880285,0.882838,0.886415,0.888049,0.890718,0.894469,0.896241,0.898481,0.900732,0.902479,0.904356,0.907684,0.91026,0.909878,0.910794,0.912889,0.915045,0.914968,0.918922,0.918224,0.920522,0.920414,0.92307,0.923261,0.925345,0.925501,0.925709,0.929378,0.929094,0.928877,0.930255,0.93062,0.931699,0.93148,0.933347,0.933194,0.934838,0.934915,0.936164,0.936703,0.936426,0.937072,0.938506,0.940071,0.938936,0.939008,0.940329,0.942348,0.941557,0.94235,0.941573,0.942722,0.943311,0.944599,0.944123,0.943652,0.945649,0.946657,0.945855,0.946064,0.946707,0.945041,0.946626,0.947298,0.947653,0.94642,0.94838 };
			static const unsigned char TapePathData[] = { 110,109,0,0,128,191,163,255,127,63,108,164,112,125,191,151,255,127,63,108,72,225,122,191,136,255,127,63,108,236,81,120,191,120,255,127,63,108,144,194,117,191,101,255,127,63,108,52,51,115,191,80,255,127,63,108,216,163,112,191,56,255,127,63,108,124,20, 110,191,29,255,127,63,108,32,133,107,191,254,254,127,63,108,196,245,104,191,219,254,127,63,108,104,102,102,191,179,254,127,63,108,12,215,99,191,133,254,127,63,108,176,71,97,191,82,254,127,63,108,84,184,94,191,23,254,127,63,108,248,40,92,191,212,253,127, 63,108,156,153,89,191,136,253,127,63,108,64,10,87,191,50,253,127,63,108,228,122,84,191,208,252,127,63,108,136,235,81,191,96,252,127,63,108,44,92,79,191,226,251,127,63,108,208,204,76,191,82,251,127,63,108,116,61,74,191,174,250,127,63,108,24,174,71,191, 244,249,127,63,108,188,30,69,191,33,249,127,63,108,96,143,66,191,49,248,127,63,108,4,0,64,191,32,247,127,63,108,168,112,61,191,233,245,127,63,108,76,225,58,191,137,244,127,63,108,240,81,56,191,248,242,127,63,108,148,194,53,191,48,241,127,63,108,56,51, 51,191,43,239,127,63,108,220,163,48,191,222,236,127,63,108,128,20,46,191,66,234,127,63,108,36,133,43,191,74,231,127,63,108,200,245,40,191,234,227,127,63,108,108,102,38,191,20,224,127,63,108,16,215,35,191,185,219,127,63,108,180,71,33,191,197,214,127,63, 108,88,184,30,191,36,209,127,63,108,252,40,28,191,191,202,127,63,108,160,153,25,191,122,195,127,63,108,68,10,23,191,55,187,127,63,108,232,122,20,191,212,177,127,63,108,140,235,17,191,41,167,127,63,108,48,92,15,191,10,155,127,63,108,212,204,12,191,68, 141,127,63,108,120,61,10,191,157,125,127,63,108,28,174,7,191,212,107,127,63,108,192,30,5,191,159,87,127,63,108,100,143,2,191,170,64,127,63,108,8,0,0,191,148,38,127,63,108,88,225,250,190,242,8,127,63,108,160,194,245,190,72,231,126,63,108,232,163,240,190, 11,193,126,63,108,48,133,235,190,156,149,126,63,108,120,102,230,190,71,100,126,63,108,192,71,225,190,66,44,126,63,108,8,41,220,190,165,236,125,63,108,80,10,215,190,107,164,125,63,108,152,235,209,190,110,82,125,63,108,224,204,204,190,95,245,124,63,108, 40,174,199,190,195,139,124,63,108,112,143,194,190,241,19,124,63,108,184,112,189,190,7,140,123,63,108,0,82,184,190,230,241,122,63,108,72,51,179,190,42,67,122,63,108,144,20,174,190,37,125,121,63,108,216,245,168,190,208,156,120,63,108,32,215,163,190,203, 158,119,63,108,104,184,158,190,76,127,118,63,108,176,153,153,190,23,58,117,63,108,248,122,148,190,121,202,115,63,108,64,92,143,190,52,43,114,63,108,136,61,138,190,124,86,112,63,108,208,30,133,190,239,69,110,63,108,24,0,128,190,132,242,107,63,108,191, 194,117,190,143,84,105,63,108,78,133,107,190,185,99,102,63,108,221,71,97,190,255,22,99,63,108,108,10,87,190,186,100,95,63,108,251,204,76,190,172,66,91,63,108,138,143,66,190,19,166,86,63,108,25,82,56,190,198,131,81,63,108,168,20,46,190,101,208,75,63,108, 55,215,35,190,136,128,69,63,108,198,153,25,190,14,137,62,63,108,85,92,15,190,108,223,54,63,108,228,30,5,190,27,122,46,63,108,231,194,245,189,4,81,37,63,108,6,72,225,189,3,94,27,63,108,37,205,204,189,114,157,16,63,108,68,82,184,189,172,14,5,63,108,99, 215,163,189,38,105,241,62,108,130,92,143,189,241,43,215,62,108,65,195,117,189,237,123,187,62,108,126,205,76,189,49,120,158,62,108,187,215,35,189,169,72,128,62,108,241,195,245,188,57,59,66,62,108,108,216,163,188,118,93,2,62,108,206,217,35,188,230,230, 130,61,108,164,240,48,181,80,141,141,54,108,70,212,35,60,125,226,130,189,108,168,213,163,60,73,91,2,190,108,45,193,245,60,24,57,66,190,108,89,214,35,61,160,71,128,190,108,28,204,76,61,49,119,158,190,108,223,193,117,61,248,122,187,190,108,209,91,143,61, 8,43,215,190,108,178,214,163,61,73,104,241,190,108,147,81,184,61,69,14,5,191,108,116,204,204,61,17,157,16,191,108,85,71,225,61,170,93,27,191,108,54,194,245,61,177,80,37,191,108,140,30,5,62,208,121,46,191,108,253,91,15,62,39,223,54,191,108,110,153,25, 62,207,136,62,191,108,223,214,35,62,79,128,69,191,108,80,20,46,62,49,208,75,191,108,193,81,56,62,152,131,81,191,108,50,143,66,62,233,165,86,191,108,163,204,76,62,135,66,91,191,108,20,10,87,62,152,100,95,191,108,133,71,97,62,225,22,99,191,108,246,132, 107,62,158,99,102,191,108,103,194,117,62,120,84,105,191,108,216,255,127,62,111,242,107,191,108,164,30,133,62,220,69,110,191,108,92,61,138,62,108,86,112,191,108,20,92,143,62,37,43,114,191,108,204,122,148,62,108,202,115,191,108,132,153,153,62,12,58,117, 191,108,60,184,158,62,65,127,118,191,108,244,214,163,62,194,158,119,191,108,172,245,168,62,200,156,120,191,108,100,20,174,62,29,125,121,191,108,28,51,179,62,36,67,122,191,108,212,81,184,62,225,241,122,191,108,140,112,189,62,2,140,123,191,108,68,143,194, 62,237,19,124,191,108,252,173,199,62,191,139,124,191,108,180,204,204,62,91,245,124,191,108,108,235,209,62,107,82,125,191,108,36,10,215,62,105,164,125,191,108,220,40,220,62,162,236,125,191,108,148,71,225,62,64,44,126,191,108,76,102,230,62,69,100,126,191, 108,4,133,235,62,154,149,126,191,108,188,163,240,62,9,193,126,191,108,116,194,245,62,71,231,126,191,108,44,225,250,62,241,8,127,191,108,228,255,255,62,147,38,127,191,108,78,143,2,63,169,64,127,191,108,170,30,5,63,159,87,127,191,108,6,174,7,63,212,107, 127,191,108,98,61,10,63,157,125,127,191,108,190,204,12,63,67,141,127,191,108,26,92,15,63,10,155,127,191,108,118,235,17,63,41,167,127,191,108,210,122,20,63,212,177,127,191,108,46,10,23,63,55,187,127,191,108,138,153,25,63,122,195,127,191,108,230,40,28, 63,191,202,127,191,108,66,184,30,63,36,209,127,191,108,158,71,33,63,197,214,127,191,108,250,214,35,63,185,219,127,191,108,86,102,38,63,20,224,127,191,108,178,245,40,63,234,227,127,191,108,14,133,43,63,73,231,127,191,108,106,20,46,63,65,234,127,191,108, 198,163,48,63,222,236,127,191,108,34,51,51,63,43,239,127,191,108,126,194,53,63,48,241,127,191,108,218,81,56,63,248,242,127,191,108,54,225,58,63,137,244,127,191,108,146,112,61,63,233,245,127,191,108,238,255,63,63,32,247,127,191,108,74,143,66,63,49,248, 127,191,108,166,30,69,63,33,249,127,191,108,2,174,71,63,244,249,127,191,108,94,61,74,63,174,250,127,191,108,186,204,76,63,82,251,127,191,108,22,92,79,63,226,251,127,191,108,114,235,81,63,96,252,127,191,108,206,122,84,63,208,252,127,191,108,42,10,87,63, 50,253,127,191,108,134,153,89,63,136,253,127,191,108,226,40,92,63,212,253,127,191,108,62,184,94,63,23,254,127,191,108,154,71,97,63,82,254,127,191,108,246,214,99,63,133,254,127,191,108,82,102,102,63,179,254,127,191,108,174,245,104,63,219,254,127,191,108, 10,133,107,63,254,254,127,191,108,102,20,110,63,29,255,127,191,108,194,163,112,63,56,255,127,191,108,30,51,115,63,80,255,127,191,108,122,194,117,63,101,255,127,191,108,214,81,120,63,120,255,127,191,108,50,225,122,63,136,255,127,191,108,142,112,125,63, 151,255,127,191,108,234,255,127,63,163,255,127,191,101,0,0 };

			/**
			 * Tape-style clipping distortion.
			 * https://www.desmos.com/calculator/ne4zyrhzmn
			 */
			template<typename T>
			struct Tape : public DistortionTypeBase<T>
			{
				Tape()
					:DistortionTypeBase<T>(TapeCompensationData, TapePathData, sizeof(TapePathData))
				{

				}
				T processSample(T in, T amt, bool isScaled) override
				{
					T a = 9 * amt + 1;

					return std::tanh(a * in) * (isScaled ? DistortionTypeBase<T>::CompensationGain.processSample(amt) : 1);
				}

				inline static const juce::String Name{ "Tape" };
			};

		}

	} //namespace dsp
} //namespace bdsp
