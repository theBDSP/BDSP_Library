#pragma once

namespace bdsp
{
	namespace dsp
	{
		namespace DistortionTypes
		{

			static const double BumpCompensationData[] = {0.751201,0.775682,0.79638,0.815526,0.827969,0.842124,0.853197,0.858876,0.868395,0.872059,0.876202,0.880456,0.880455,0.880951,0.884048,0.884136,0.884248,0.882312,0.882296,0.878695,0.879242,0.876527,0.876024,0.874099,0.870971,0.869359,0.867148,0.865195,0.862256,0.860454,0.857784,0.855035,0.85238,0.850001,0.848228,0.846957,0.842098,0.840116,0.839395,0.837538,0.834859,0.833033,0.829473,0.827761,0.826724,0.822076,0.820094,0.818871,0.81719,0.816246,0.815253,0.813286,0.810606,0.807922,0.806271,0.805638,0.804032,0.80217,0.80051,0.798057,0.797478,0.794832,0.792699,0.792106,0.791502,0.789713,0.789726,0.787368,0.784088,0.78528,0.782891,0.782749,0.780654,0.779683,0.77807,0.777195,0.775533,0.773457,0.772991,0.773425,0.772163,0.770834,0.769671,0.768997,0.76851,0.767434,0.766653,0.765221,0.764091,0.7647,0.762602,0.762612,0.761426,0.759731,0.75984,0.759727,0.757764,0.758051,0.75737,0.756344,0.75545};
			static const unsigned char BumpPathData[] = { 110,109,0,0,128,191,97,184,59,63,108,164,112,125,191,56,185,59,63,108,72,225,122,191,35,186,59,63,108,236,81,120,191,35,187,59,63,108,144,194,117,191,58,188,59,63,108,52,51,115,191,105,189,59,63,108,216,163,112,191,180,190,59,63,108,124,20,110,191,27, 192,59,63,108,32,133,107,191,163,193,59,63,108,196,245,104,191,76,195,59,63,108,104,102,102,191,31,197,59,63,108,12,215,99,191,25,199,59,63,108,176,71,97,191,64,201,59,63,108,84,184,94,191,152,203,59,63,108,248,40,92,191,38,206,59,63,108,156,153,89,191, 238,208,59,63,108,64,10,87,191,245,211,59,63,108,228,122,84,191,66,215,59,63,108,136,235,81,191,218,218,59,63,108,44,92,79,191,195,222,59,63,108,208,204,76,191,5,227,59,63,108,116,61,74,191,169,231,59,63,108,24,174,71,191,182,236,59,63,108,188,30,69, 191,56,242,59,63,108,96,143,66,191,54,248,59,63,108,4,0,64,191,191,254,59,63,108,168,112,61,191,218,5,60,63,108,76,225,58,191,151,13,60,63,108,240,81,56,191,6,22,60,63,108,148,194,53,191,49,31,60,63,108,56,51,51,191,51,41,60,63,108,220,163,48,191,20, 52,60,63,108,128,20,46,191,239,63,60,63,108,36,133,43,191,217,76,60,63,108,200,245,40,191,227,90,60,63,108,108,102,38,191,51,106,60,63,108,16,215,35,191,221,122,60,63,108,180,71,33,191,254,140,60,63,108,88,184,30,191,194,160,60,63,108,252,40,28,191,63, 182,60,63,108,160,153,25,191,172,205,60,63,108,68,10,23,191,39,231,60,63,108,232,122,20,191,227,2,61,63,108,140,235,17,191,23,33,61,63,108,48,92,15,191,240,65,61,63,108,212,204,12,191,184,101,61,63,108,120,61,10,191,161,140,61,63,108,28,174,7,191,244, 182,61,63,108,192,30,5,191,11,229,61,63,108,100,143,2,191,31,23,62,63,108,8,0,0,191,161,77,62,63,108,88,225,250,190,223,136,62,63,108,160,194,245,190,61,201,62,63,108,232,163,240,190,72,15,63,63,108,48,133,235,190,73,91,63,63,108,120,102,230,190,232, 173,63,63,108,192,71,225,190,149,7,64,63,108,8,41,220,190,215,104,64,63,108,80,10,215,190,119,210,64,63,108,152,235,209,190,214,68,65,63,108,224,204,204,190,210,192,65,63,108,40,174,199,190,7,71,66,63,108,112,143,194,190,15,216,66,63,108,184,112,189, 190,250,116,67,63,108,0,82,184,190,35,30,68,63,108,72,51,179,190,137,212,68,63,108,144,20,174,190,210,152,69,63,108,216,245,168,190,119,107,70,63,108,32,215,163,190,131,77,71,63,108,104,184,158,190,243,62,72,63,108,176,153,153,190,93,64,73,63,108,248, 122,148,190,202,81,74,63,108,64,92,143,190,188,114,75,63,108,136,61,138,190,16,163,76,63,108,208,30,133,190,13,225,77,63,108,24,0,128,190,254,42,79,63,108,191,194,117,190,3,126,80,63,108,78,133,107,190,1,214,81,63,108,221,71,97,190,109,45,83,63,108,108, 10,87,190,231,124,84,63,108,251,204,76,190,143,186,85,63,108,138,143,66,190,96,217,86,63,108,25,82,56,190,224,201,87,63,108,168,20,46,190,74,117,88,63,108,55,215,35,190,96,195,88,63,108,198,153,25,190,225,146,88,63,108,85,92,15,190,39,186,87,63,108,228, 30,5,190,38,13,86,63,108,231,194,245,189,171,74,83,63,108,6,72,225,189,241,53,79,63,108,37,205,204,189,218,128,73,63,108,68,82,184,189,141,208,65,63,108,99,215,163,189,73,217,55,63,108,130,92,143,189,60,50,43,63,108,65,195,117,189,93,156,27,63,108,126, 205,76,189,255,222,8,63,108,187,215,35,189,212,177,229,62,108,241,195,245,188,63,116,179,62,108,108,216,163,188,180,21,119,62,108,206,217,35,188,160,210,252,61,108,164,240,48,181,0,128,238,53,108,70,212,35,60,182,118,0,190,108,168,213,163,60,93,22,127, 190,108,45,193,245,60,217,18,188,190,108,89,214,35,61,13,88,244,190,108,28,204,76,61,201,165,19,191,108,223,193,117,61,9,20,42,191,108,209,91,143,61,209,112,61,191,108,178,214,163,61,242,186,77,191,108,147,81,184,61,174,41,91,191,108,116,204,204,61,0, 5,102,191,108,85,71,225,61,22,138,110,191,108,54,194,245,61,236,24,117,191,108,140,30,5,62,86,243,121,191,108,253,91,15,62,182,98,125,191,108,110,153,25,62,160,168,127,191,108,223,214,35,62,26,122,128,191,108,80,20,46,62,218,189,128,191,108,193,81,56, 62,118,177,128,191,108,50,143,66,62,212,101,128,191,108,163,204,76,62,184,210,127,191,108,20,10,87,62,8,140,126,191,108,133,71,97,62,138,12,125,191,108,246,132,107,62,67,98,123,191,108,103,194,117,62,128,153,121,191,108,216,255,127,62,112,188,119,191, 108,164,30,133,62,126,210,117,191,108,92,61,138,62,97,226,115,191,108,20,92,143,62,249,240,113,191,108,204,122,148,62,67,2,112,191,108,132,153,153,62,60,25,110,191,108,60,184,158,62,131,56,108,191,108,244,214,163,62,173,97,106,191,108,172,245,168,62, 43,150,104,191,108,100,20,174,62,19,215,102,191,108,28,51,179,62,204,36,101,191,108,212,81,184,62,53,128,99,191,108,140,112,189,62,50,233,97,191,108,68,143,194,62,243,95,96,191,108,252,173,199,62,153,228,94,191,108,180,204,204,62,188,118,93,191,108,108, 235,209,62,130,22,92,191,108,36,10,215,62,103,195,90,191,108,220,40,220,62,45,125,89,191,108,148,71,225,62,170,67,88,191,108,76,102,230,62,57,22,87,191,108,4,133,235,62,210,244,85,191,108,188,163,240,62,215,222,84,191,108,116,194,245,62,236,211,83,191, 108,44,225,250,62,224,211,82,191,108,228,255,255,62,11,222,81,191,108,78,143,2,63,77,242,80,191,108,170,30,5,63,34,16,80,191,108,6,174,7,63,40,55,79,191,108,98,61,10,63,50,103,78,191,108,190,204,12,63,172,159,77,191,108,26,92,15,63,114,224,76,191,108, 118,235,17,63,23,41,76,191,108,210,122,20,63,65,121,75,191,108,46,10,23,63,206,208,74,191,108,138,153,25,63,65,47,74,191,108,230,40,28,63,111,148,73,191,108,66,184,30,63,15,0,73,191,108,158,71,33,63,198,113,72,191,108,250,214,35,63,131,233,71,191,108, 86,102,38,63,216,102,71,191,108,178,245,40,63,166,233,70,191,108,14,133,43,63,170,113,70,191,108,106,20,46,63,160,254,69,191,108,198,163,48,63,119,144,69,191,108,34,51,51,63,217,38,69,191,108,126,194,53,63,165,193,68,191,108,218,81,56,63,172,96,68,191, 108,54,225,58,63,177,3,68,191,108,146,112,61,63,171,170,67,191,108,238,255,63,63,79,85,67,191,108,74,143,66,63,134,3,67,191,108,166,30,69,63,42,181,66,191,108,2,174,71,63,10,106,66,191,108,94,61,74,63,26,34,66,191,108,186,204,76,63,35,221,65,191,108, 22,92,79,63,12,155,65,191,108,114,235,81,63,191,91,65,191,108,206,122,84,63,12,31,65,191,108,42,10,87,63,235,228,64,191,108,134,153,89,63,50,173,64,191,108,226,40,92,63,206,119,64,191,108,62,184,94,63,167,68,64,191,108,154,71,97,63,157,19,64,191,108, 246,214,99,63,166,228,63,191,108,82,102,102,63,163,183,63,191,108,174,245,104,63,125,140,63,191,108,10,133,107,63,43,99,63,191,108,102,20,110,63,141,59,63,191,108,194,163,112,63,156,21,63,191,108,30,51,115,63,62,241,62,191,108,122,194,117,63,100,206, 62,191,108,214,81,120,63,1,173,62,191,108,50,225,122,63,254,140,62,191,108,142,112,125,63,87,110,62,191,108,234,255,127,63,246,80,62,191,101,0,0 };
			/**
			 * Aggressive asymmetrical distortion.
			 * https://www.desmos.com/calculator/tihumel7gu
			 */
			template<typename T>
			struct Bump : public DistortionTypeBase<T>
			{
				Bump()
					:DistortionTypeBase<T>(BumpCompensationData, std::size(BumpCompensationData), BumpPathData, sizeof(BumpPathData))
				{
					std::function<T(T)> BumpFunc = [=](T x)
					{
						T c0 = 2.0 / 3.0;
						T c1 = 1.0 / 3.0;
						return 1 / 1.37208 * ((exp(c0 * 10 * x) - exp(-c1 * 10 * x)) / (exp(10 * x) + exp(-10 * x)) + (exp(10 * x) - exp(-c0 * 10 * x)) / (exp(10 * x) + exp(-c0 * 10 * x)));
					};
					functionLookup.initialise(BumpFunc, -1.9, 3.75, 1500);
				}
				T processSample(T in, T amt, bool isScaled) override
				{
					T a = (9 * amt + 1) / 5;

					return functionLookup.processSample(a * in) * (isScaled ? DistortionTypeBase<T>::CompensationGain.processSample(amt) : 1);
				}

				inline static const juce::String Name{ "Bump" };

			private:
				juce::dsp::LookupTableTransform<T> functionLookup;
			};

		}

	} //namespace dsp
} //namespace bdsp
