#include "bdsp_Logo.h"


namespace bdsp
{
	Logo::Logo(GUI_Universals* universalsToUse)
		:ComponentCore(this, universalsToUse),
		GUI_Universals::Listener(universalsToUse)

	{



		static const unsigned char pathData[] = { 110,109,251,145,238,64,134,131,133,57,98,183,93,195,64,134,131,133,57,116,147,153,64,52,227,218,62,241,157,106,64,162,189,155,63,98,125,145,106,64,172,206,155,63,143,141,106,64,103,222,155,63,44,125,106,64,43,255,155,63,98,80,218,33,64,196,239,255,63,
		94,234,207,63,188,222,68,64,144,126,123,63,48,223,139,64,98,247,83,123,63,97,231,139,64,7,61,123,63,195,247,139,64,126,251,122,63,245,255,139,64,98,61,208,122,63,38,8,140,64,245,185,122,63,136,24,140,64,108,120,122,63,186,32,140,64,98,134,32,167,62,21,
		186,181,64,0,192,39,57,154,131,227,64,0,192,39,57,10,185,9,65,98,0,192,39,57,91,176,33,65,133,32,167,62,67,155,56,65,108,120,122,63,16,104,77,65,98,5,163,122,63,41,108,77,65,245,185,122,63,90,116,77,65,126,251,122,63,114,120,77,65,98,23,38,123,63,139,
		124,77,65,7,61,123,63,188,132,77,65,144,126,123,63,212,136,77,65,98,214,226,207,63,240,62,98,65,24,202,33,64,212,124,115,65,199,99,106,64,158,250,127,65,98,41,116,106,64,229,253,127,65,238,148,106,64,223,252,127,65,80,165,106,64,104,1,128,65,98,52,186,
		156,64,59,219,134,65,112,119,198,64,202,75,136,65,31,244,231,64,10,158,137,65,98,73,174,23,65,88,111,140,65,210,70,77,65,171,104,139,65,79,105,107,65,135,128,138,65,108,79,105,107,65,152,78,106,65,98,227,240,77,65,238,203,107,65,99,81,22,65,106,207,109,
		65,20,34,245,64,34,110,105,65,98,49,95,211,64,17,196,102,65,244,26,186,64,169,103,100,65,148,130,165,64,177,53,93,65,108,207,97,165,64,128,45,93,65,108,10,65,165,64,30,29,93,65,98,242,55,141,64,69,218,84,65,26,90,116,64,34,202,73,65,154,99,86,64,188,
		164,58,65,108,213,66,86,64,90,148,58,65,108,16,34,86,64,248,131,58,65,98,22,52,56,64,170,161,43,65,178,98,41,64,173,182,27,65,178,98,41,64,162,187,9,65,98,178,98,41,64,88,129,239,64,21,52,56,64,52,171,207,64,16,34,86,64,152,230,177,64,108,213,66,86,64,
		54,214,177,64,108,154,99,86,64,113,181,177,64,98,25,90,116,64,166,106,147,64,242,55,141,64,212,114,122,64,10,65,165,64,155,103,89,64,108,207,97,165,64,214,70,89,64,108,148,130,165,64,77,5,89,64,98,124,68,189,64,26,210,55,64,232,72,212,64,192,75,41,64,
		170,149,238,64,192,75,41,64,108,79,105,107,65,192,75,41,64,108,79,105,107,65,228,32,233,57,99,109,72,220,138,65,134,131,133,57,108,72,220,138,65,56,64,41,64,108,133,235,196,65,56,64,41,64,98,182,126,203,65,56,64,41,64,209,63,209,65,236,206,55,64,75,48,
		215,65,32,2,89,64,108,124,56,215,65,169,67,89,64,108,173,64,215,65,110,100,89,64,98,243,66,221,65,167,111,122,64,172,5,226,65,226,100,147,64,124,196,229,65,173,175,177,64,108,149,200,229,65,114,208,177,64,108,174,204,229,65,212,224,177,64,98,115,138,
		233,65,112,165,207,64,215,104,235,65,147,123,239,64,215,104,235,65,192,184,9,65,98,215,104,235,65,205,70,23,65,172,74,234,65,250,231,35,65,167,16,232,65,182,15,48,65,108,142,12,232,65,24,32,48,65,108,142,12,232,65,122,48,48,65,98,129,207,229,65,196,159,
		60,65,206,229,226,65,214,203,70,65,195,88,223,65,221,47,79,65,108,189,128,239,65,174,135,106,65,98,248,211,244,65,118,242,93,65,211,245,248,65,220,40,79,65,65,241,251,65,44,160,62,65,108,65,241,251,65,202,143,62,65,98,167,5,255,65,89,186,45,65,62,72,
		0,66,33,247,27,65,62,72,0,66,45,184,9,65,98,62,72,0,66,226,129,227,64,73,244,253,65,134,184,181,64,12,189,248,65,1,31,140,64,108,243,184,248,65,60,254,139,64,98,62,152,243,65,140,35,69,64,34,98,236,65,215,61,0,64,233,80,227,65,174,123,156,63,108,184,
		72,227,65,37,58,156,63,98,209,52,218,65,125,128,219,62,46,191,207,65,79,1,158,184,98,237,196,65,79,1,158,184,99,109,148,42,166,65,197,190,101,65,98,144,212,155,65,88,215,101,65,129,21,146,65,24,196,102,65,100,222,138,65,92,161,103,65,108,100,222,138,
		65,217,40,137,65,98,34,155,153,65,104,107,136,65,219,104,181,65,184,108,135,65,106,72,195,65,45,157,137,65,98,40,185,203,65,59,242,138,65,45,10,210,65,44,28,140,65,74,48,215,65,40,181,143,65,108,123,56,215,65,65,185,143,65,108,172,64,215,65,114,193,143,
		65,98,242,66,221,65,222,226,147,65,188,6,226,65,234,105,153,65,140,197,229,65,146,252,160,65,108,165,201,229,65,195,4,161,65,108,190,205,229,65,244,12,161,65,98,131,139,233,65,27,126,168,65,231,105,235,65,153,115,176,65,231,105,235,65,31,113,185,65,98,
		231,105,235,65,165,110,194,65,131,139,233,65,35,100,202,65,190,205,229,65,74,213,209,65,108,165,201,229,65,123,221,209,65,108,140,197,229,65,172,229,209,65,98,188,6,226,65,95,120,217,65,253,66,221,65,102,0,223,65,172,64,215,65,221,33,227,65,108,123,56,
		215,65,246,37,227,65,108,74,48,215,65,39,46,227,65,98,203,63,209,65,136,84,231,65,187,127,203,65,100,38,233,65,144,236,196,65,100,38,233,65,108,100,222,138,65,100,38,233,65,108,100,222,138,65,224,77,254,65,108,65,20,138,65,224,77,254,65,108,65,20,138,
		65,241,78,254,65,108,144,236,196,65,241,78,254,65,98,97,190,207,65,241,78,254,65,10,52,218,65,178,223,250,65,231,71,227,65,22,138,244,65,98,12,90,236,65,81,75,238,65,105,146,243,65,166,176,229,65,51,180,248,65,127,86,219,65,108,76,184,248,65,78,78,219,
		65,98,50,242,253,65,204,229,208,65,252,71,0,66,68,113,197,65,252,71,0,66,142,114,185,65,98,252,71,0,66,230,118,173,65,197,243,253,65,108,1,162,65,136,188,248,65,11,155,151,65,108,111,184,248,65,218,146,151,65,98,191,151,243,65,188,55,141,65,158,97,236,
		65,6,155,132,65,101,80,227,65,1,182,124,65,108,76,76,227,65,208,173,124,65,98,169,109,217,65,202,230,110,65,193,247,206,65,54,20,108,65,15,148,198,65,52,110,105,65,98,43,127,190,65,35,225,102,65,237,133,180,65,3,230,101,65,173,160,170,65,96,194,101,65,
		98,247,33,169,65,71,190,101,65,187,164,167,65,71,190,101,65,187,42,166,65,73,192,101,65,99,109,88,125,8,64,10,8,137,65,98,83,199,187,63,161,82,143,65,114,115,115,63,105,183,150,65,64,6,20,63,203,251,158,65,98,194,232,19,63,215,253,158,65,22,35,20,63,
		240,1,159,65,64,6,20,63,252,3,159,65,98,71,241,19,63,201,5,159,65,46,131,19,63,8,6,159,65,46,131,19,63,21,8,159,65,98,20,98,68,62,126,113,167,65,0,0,255,55,202,81,176,65,0,0,255,55,172,111,185,65,98,0,0,255,55,79,107,197,65,98,82,167,62,161,221,208,65,
		90,145,122,63,2,68,219,65,98,243,187,122,63,14,70,219,65,101,181,122,63,39,74,219,65,108,20,123,63,51,76,219,65,98,5,63,123,63,63,78,219,65,245,85,123,63,88,82,219,65,126,151,123,63,100,84,219,65,98,214,246,207,63,88,176,229,65,18,233,33,64,52,77,238,
		65,236,139,106,64,56,140,244,65,98,96,152,106,64,73,141,244,65,239,148,106,64,68,142,244,65,177,172,106,64,81,144,244,65,98,213,154,153,64,153,224,250,65,24,101,195,64,160,75,254,65,91,153,238,64,160,75,254,65,108,39,107,107,65,160,75,254,65,108,39,107,
		107,65,36,36,233,65,108,90,153,238,64,36,36,233,65,98,152,76,212,64,36,36,233,65,43,72,189,64,72,82,231,65,68,134,165,64,231,43,227,65,108,127,101,165,64,182,35,227,65,108,186,68,165,64,157,31,227,65,98,162,59,141,64,49,254,222,65,122,97,116,64,48,119,
		217,65,250,106,86,64,125,228,209,65,108,53,74,86,64,76,220,209,65,108,112,41,86,64,27,212,209,65,98,118,59,56,64,244,98,202,65,18,106,41,64,118,109,194,65,18,106,41,64,240,111,185,65,98,18,106,41,64,239,168,178,65,168,57,50,64,78,88,172,65,208,9,68,64,
		112,68,166,65,108,149,42,68,64,63,60,166,65,108,90,75,68,64,14,52,166,65,98,194,51,86,64,105,252,159,65,108,95,109,64,96,230,154,65,229,227,132,64,93,180,150,65,99,101,0,0 };



		p.loadPathFromData(pathData, sizeof(pathData));

	
}


Logo::~Logo()
{

}


void Logo::paint(juce::Graphics& g)
{

	g.setFillType(logoFillType);
	g.fillPath(p);





}

void Logo::setColors(const juce::Array<NamedColorsIdentifier>& newColors)
{
	colors.clear();
	for (auto m : newColors)
	{
		colors.add(m);
	}


	GUI_UniversalsChanged();

}





void Logo::resized()
{
	auto confined = confineToAspectRatio(getLocalBounds(), 1);


	scaleToFitPrecise(p, confined);


	if (logoFillType.isGradient())
	{
		logoFillType.gradient->point1 = p.getBounds().getRelativePoint(0.1, 0.1);
		logoFillType.gradient->point2 = p.getBounds().getRelativePoint(0.9, 0.9);
	}

}

juce::Path Logo::getPath()
{
	return p;
}

void Logo::GUI_UniversalsChanged()
{
	if (colors.size() == 1)
	{
		logoFillType.setColour(getColor(colors[0]));
	}
	else
	{
		juce::ColourGradient cg(getColor(colors.getFirst()), p.getBounds().getTopLeft(), getColor(colors.getLast()), p.getBounds().getBottomRight(), false);

		for (int i = 1; i < colors.size() - 1; ++i)
		{
			cg.addColour(i / (colors.size() - 1.0), getColor(colors[i]));
		}

		logoFillType.setGradient(cg);
	}


}

}// namnepace bdsp

